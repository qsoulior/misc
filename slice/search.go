package slice

// Обычный бинарный поиск, работающий за O(log(n)).
func BinarySearch[S ~[]E, E, T any](arr S, target T, cmp func(E, T) int) int {
	left, right := 0, len(arr)-1 // границы части массива, в которой выполняется поиск

	for left <= right {
		mid := (left + right) / 2  // индекс среднего элемента части массива
		c := cmp(arr[mid], target) // результат сравнения среднего элемента с искомым

		if c == 0 {
			// Если средний элемент равен искомому, возвращаем его индекс.
			return mid
		}

		if c < 0 {
			// Если средний элемент меньше искомого, т.е. предшествует ему,
			// то сдвигаем левую границу части массива правее индекса среднего элемента.
			left = mid + 1
		} else {
			// Если средний элемент больше искомого, т.е. следует за ним,
			// то сдвигаем правую границу части массива левее индекса среднего элемента.
			right = mid - 1
		}
	}

	return -1
}
